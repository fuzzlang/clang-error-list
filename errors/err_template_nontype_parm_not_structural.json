{
  "id": "err_template_nontype_parm_not_structural",
  "description": "This error occurs when a non-type template parameter has a type that is not allowed for non-type template parameters. Before C++20, class types were not allowed as non-type template parameters. In C++20, only structural types are allowed.",
  "exampleCode": "template<_Atomic int ci> struct AtomicInt;\n\nstruct B {\n  int a;\n  float g;\n};\n\ntemplate<B> struct ClassNTTP;",
  "explanation": "The error occurs because non-type template parameters cannot have certain types. Before C++20, class types like 'B' were not allowed as non-type template parameters. In C++20, only structural types (types that can be compared for equality by comparing their underlying bits) are allowed.",
  "fixedCode": "// For C++20 and later, ensure B is a structural type:\nstruct B {\n  int a;\n  float g;\n  \n  // Add comparison operators for structural equality\n  bool operator==(const B&) const = default;\n};\n\ntemplate<B b> struct ClassNTTP { /* ... */ };"
} 